type Category {
    categoryId: ID!
    categoryName: String!
    categoryDescription: String
}

type Currency {
    currencyId: ID!
    currencyCode: String!
    currencyName: String!
    currencySymbol: String!
}

type Expense {
    expenseId: ID!
    amount: Float!
    description: String
    date: String!
    userId: ID!
    categoryId: ID!
    currencyId: ID!
}

type ExpenseConnection {
    edges: [ExpenseEdge]!
    pageInfo: PageInfo!
}

type ExpenseEdge {
    node: Expense!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}

# Query
type Query {
    # Get all expenses
    getAllExpenses(first: Int, after: String): ExpenseConnection!

    # Get all expenses by user ID, category ID, and currency ID
    getAllExpensesByFilters(userId: ID, categoryName: String, currencyCode: String, first: Int, after: String): ExpenseConnection!
}